{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\the purvik\\\\OneDrive\\\\Desktop\\\\website code\\\\Textify-master\\\\Textify-master\\\\src\\\\components\\\\TextForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { FaClipboard } from \"react-icons/fa\";\nimport ReactTooltip from 'react-tooltip';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TextForm(props) {\n  _s();\n\n  const handleBtnUpClick = () => {\n    let newText = text.toUpperCase();\n    setText(newText);\n  };\n\n  const handleBtnLoClick = () => {\n    let newText = text.toLowerCase();\n    setText(newText);\n  };\n\n  const handleBtnClearClick = () => {\n    let newText = '';\n    setText(newText);\n  };\n\n  const handleBtnFlClick = () => {\n    let re = /(^|[.!?]\\s+)([a-z])/g;\n    let newText = text.replace(re, function (m, $1, $2) {\n      return $1 + $2.toUpperCase();\n    });\n    setText(newText);\n  };\n\n  const handleBtnReClick = () => {\n    let newText = text.split(/[ ]+/);\n    setText(newText.join(\" \"));\n  };\n\n  const handleOnChange = Event => {\n    setText(Event.target.value);\n  };\n\n  const handleCopy = () => {\n    try {\n      navigator.clipboard.writeText(text);\n    } catch (err) {\n      console.error('Failed to copy: ', err);\n    }\n  };\n\n  const [text, setText] = useState('Enter text here...');\n  let theme = props.mode.toString();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `text-container ${theme}`,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"input\",\n        id: \"my-box\",\n        value: text,\n        onChange: handleOnChange,\n        rows: \"12\",\n        cols: \"150\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"clip\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: text.length === 0,\n          className: \"copy-btn\",\n          onClick: handleCopy,\n          \"data-tip\": \"Copy Text\",\n          children: /*#__PURE__*/_jsxDEV(FaClipboard, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 116\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(ReactTooltip, {\n          place: \"bottom\",\n          type: \"dark\",\n          effect: \"solid\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btns\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: text.length === 0,\n          className: \"convert-btn\",\n          onClick: handleBtnUpClick,\n          children: \"Covert to Uppercase\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: text.length === 0,\n          className: \"convert-btn\",\n          onClick: handleBtnLoClick,\n          children: \"Covert to Lowercase\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: text.length === 0,\n          className: \"convert-btn\",\n          onClick: handleBtnFlClick,\n          children: \"Capitalization\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: text.length === 0,\n          className: \"convert-btn\",\n          onClick: handleBtnReClick,\n          children: \"Remove Extra Spaces\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: text.length === 0,\n          className: \"convert-btn\",\n          onClick: handleBtnClearClick,\n          children: \"Clear Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `text-container ${theme}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Your text summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `summary-container ${theme}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [text.split(/\\s+/).filter(element => {\n            return element.length !== 0;\n          }).length, \" Words & \", text.length, \" Characters\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [0.008 * text.split(/\\s+/).filter(element => {\n            return element.length !== 0;\n          }).length, \" Minutes to read\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `text-container ${theme}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `preview-container ${theme}`,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: text.length > 0 ? text : \"Nothing to preview!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(TextForm, \"AUNzZyPfQrcatQpmCt8f7PStIME=\");\n\n_c = TextForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextForm\");","map":{"version":3,"sources":["C:/Users/the purvik/OneDrive/Desktop/website code/Textify-master/Textify-master/src/components/TextForm.js"],"names":["React","useState","FaClipboard","ReactTooltip","TextForm","props","handleBtnUpClick","newText","text","toUpperCase","setText","handleBtnLoClick","toLowerCase","handleBtnClearClick","handleBtnFlClick","re","replace","m","$1","$2","handleBtnReClick","split","join","handleOnChange","Event","target","value","handleCopy","navigator","clipboard","writeText","err","console","error","theme","mode","toString","length","filter","element"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport { FaClipboard } from \"react-icons/fa\";\nimport ReactTooltip from 'react-tooltip';\n\n\n\nexport default function TextForm(props){\n\n    const handleBtnUpClick = ()=>{\n        let newText = text.toUpperCase();\n        setText(newText);\n    }\n\n    const handleBtnLoClick = ()=>{\n        let newText = text.toLowerCase();\n        setText(newText);\n    }\n\n    const handleBtnClearClick = ()=>{\n        let newText = '';\n        setText(newText);\n    }\n\n    const handleBtnFlClick = ()=>{\n        let re = /(^|[.!?]\\s+)([a-z])/g;\n        let newText = text.replace(re, function(m, $1, $2){\n            return $1+ $2.toUpperCase();\n        });\n        setText(newText);\n    }\n\n    const handleBtnReClick = ()=>{\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"));\n    }\n\n    const handleOnChange = (Event)=>{\n        setText(Event.target.value);\n    }\n\n    const handleCopy = ()=>{\n        try {\n            navigator.clipboard.writeText(text);\n\n          } catch (err) {\n            console.error('Failed to copy: ', err);\n          }\n    }\n\n    const [text, setText] = useState('Enter text here...');\n\n    let theme = (props.mode).toString();\n\n    return(\n        <>\n        <div className={`text-container ${theme}`}>\n            <textarea className=\"input\" id=\"my-box\" value={text} onChange={handleOnChange} rows=\"12\" cols=\"150\"></textarea>\n            <div className=\"clip\">\n                <button disabled={text.length===0} className=\"copy-btn\" onClick={handleCopy} data-tip=\"Copy Text\" ><FaClipboard /></button>\n                <ReactTooltip place=\"bottom\" type=\"dark\" effect=\"solid\" />\n            </div>\n            <div className=\"btns\">\n                <button disabled={text.length===0} className=\"convert-btn\" onClick={handleBtnUpClick}>Covert to Uppercase</button>\n                <button disabled={text.length===0} className=\"convert-btn\" onClick={handleBtnLoClick}>Covert to Lowercase</button>\n                <button disabled={text.length===0} className=\"convert-btn\" onClick={handleBtnFlClick}>Capitalization</button> \n                <button disabled={text.length===0} className=\"convert-btn\" onClick={handleBtnReClick}>Remove Extra Spaces</button>\n                <button disabled={text.length===0} className=\"convert-btn\" onClick={handleBtnClearClick}>Clear Text</button>\n            </div>\n        </div>\n        <div className={`text-container ${theme}`}>\n            <h1>Your text summary</h1>\n            <div className={`summary-container ${theme}`}>\n                <h3>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Words & {text.length} Characters</h3>\n                <h3>{0.008 * text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Minutes to read</h3>\n            </div>\n        </div>\n        <div className={`text-container ${theme}`}>\n            <h1>Preview</h1>\n            <div className={`preview-container ${theme}`}>\n                <p>{text.length>0?text:\"Nothing to preview!\"}</p>\n            </div>\n        </div>\n        </>\n    )\n\n}"]},"metadata":{},"sourceType":"module"}